1. java.lang.Class 클래스
    Class 객체를 이용 : 클래스에 대한 모든 정보(메타데이터 : 멤버의 이름, 수, 메소드 이름)
    Reflection API : 구체적인 클래스 타입을 알지 못하더라도,
        그 클래스에 해당하는 정보에 접근 할 수 있도록 해주는 자바 기법
        객체를 통해 클래스의 정보를 분석하여 런타임에 클래스의 동작을 검사하거나 조작하는 프로그램 기법

        프레임워크, 라이브러리에서 많이 사용됨. 스프링 DI(Dependency Injection), Proxy, ModelMapper

2. 제너릭 (Generics)
    자바5에서 도입된 기능
    타입 매개변수로 작동하는 클래스, 인터페이스, 메서드 생성이 가능하게 한다.
    개발자가 사용하는 특정 데이터 타입과 무관하게 코드를 작성할 수 있게 코드 재사용성을 확장해 준다.

    만약, 제너릭하면
    개발자들은 일반적으로 다양한 유형을 저장하기 위해 Object 같은 표준 클래스로 사용한다.
    이 접근 방식은 과도한 타입캐스팅과 런타입 오류를 유발할 수 있다.
    제너릭은 인스턴스화 할때 어떤 타입으로든 정의할 수 있는 제너릭 클래스를 생성할 수 있도록 하여 격차를 줄일 수 있도록 지원 기능

    - 제너릭 장점
        - 타입 안전성 제공 : 컬렉션, 클래스에 어떤 타입의 객체가 저장될 수 있는지를 명확히 하여 런타임 오류를 줄인다.
        - 코드 재사용성 : 여러 타입데이터 타입에 걸쳐 재사용할 수 있는 단일 클래스, 인터페이스, 메서드를 생성할 수 있다.
        - 캐스팅 제거 : 컬렉션에서 요소를 검색할때 명시적 캐스팅의 필요성을 줄여 Clean Code 목표 달성
        - 가독성 개선 : 사용되는 타입을 명확히 하여 코드의 가독성을 개선하고, 개발자가 코드를 소비하거나 유지관리 시 문서 역할을 한다.
    - 구문
        - class ClassName<T> {}
    - 인터페이스 구문 : 어떤 데이터 타입이로든 작동할 수 있는 인터페이스 이다.
        - interface InterFaceName<T> {
                void method(T t);
        }
        - public interface Processor<T>{
                void process(T input);
        }
    - 제너릭 메서드 : 메서드 내에서 타입 매개변수를 사용할 수 있다.
    - 구문
        - public<T> void methodName(T param){ }
        package Day07.genericEx.Ex03;

        public class Sample {
            // 제너릭 메서드
            public static <T> void printValue(T value) {
                System.out.println(value);
            }

            public static void main(String[] args) {
                printValue("Hello World");
                printValue(12345);
            }
        }

    - 구속된 타입 매개변수
        - 타입 매개변수의 인수로 사용할 수 있는 타입을 제한할 수 있다. extends 키워드를 통해서
        - class ClassName <T extends ClassName>{ }
        package Day07.genericEx.Ex03.extendsEx;

        // Number 타입만 지원하는 제너릭 클래스
        // Number 를 확장하는 클래스만 NumberBox 의 타입 매개변수로 사용할 수 있다.
        public class NumberBox <T extends Number> {
            private T number;

            public void setNumber(T number) {
                this.number = number;
            }
            public double doubleValue() {
                return number.doubleValue();
            }
        }


    - 제너릭타입을 사용할 때 유연할 수 있도록 지원하는 와일드카드 (?) 상한과 하한을 지정할 수 있다.
        package Day07.genericEx.Ex03.extendsEx;

        import java.util.List;

        // Number 타입만 지원하는 제너릭 클래스
        // Number 를 확장하는 클래스만 NumberBox 의 타입 매개변수로 사용할 수 있다.
        public class NumberBox <T extends Number> {
            private T number;

            public void setNumber(T number) {
                this.number = number;
            }
            public double doubleValue() {
                return number.doubleValue();
            }

            **public void printNumberList(List<? extends Number> list){
                for(Number number : list){
                    System.out.println(number);
                }**
            }
        }

3. 람다를 사용한 함수형 인터페이스 프로그래밍에서 제너릭 사용
    - 자바5 제너릭 등장 —> 자바 8 람다, 스트림 API 등장 ( 더 유연하고, 재사용이 가능한 코드)
    - 람다와 함께 제너릭을 효과적으로 사용하는 패턴
    - 람다 → 익명함수를 표현하는 방법으로 도입
        - 표현식
        (param) -> 표현식 (param) -> {실행문;}
        List<String> names = Arrays.asList("John","Jane","Jack")
        names.forEach(name -> System.out.println(name));


    - 함수형 인터페이스 : 하나의 추상 메서드를 포함하는 인터페이스
        - Runnable : 매개변수 없음, 반환 값 없음
        - Callable<B> : 매개변수 없음, 타입 V의 값을 반환
        - Consumer<T> : 타입 T의 매개변수를 받고 반환값 없다.
        - Supplier<T> : 타입 T의 매개변수를 받고, 타입 T의 값을 반환
        - Function<T,R> : 타입 T의 매개변수 받고, 타입 R의 값을 반환
        - Predicate<T> : 타입 T의 매개변수 받고, boolean 값 반환

4. 컬렉션 프레임워크
    - 자바는 자료구조(Data Structure)를 바탕으로 객체들을 효율적으로 추가, 삭제, 감색 할 수 있도록 관련된 인터페이스와 클래스들을 java.util 패키지에 포함시켜 놓음.

        ```java
        package Day07.collection.listEx;

        import lombok.Getter;
        import lombok.Setter;

        @Setter
        @Getter
        public class Board {
            private String subject;
            private String writer;
            private String content;

            public Board(String subject, String writer, String content) {
                this.subject = subject;
                this.writer = writer;
                this.content = content;
            }

        }
        ```

        ```java
        package Day07.collection.listEx;

        import Day04.Prob4.B;

        import java.util.ArrayList;
        import java.util.List;

        public class BoardMain {
            public static void main(String[] args) {
                // 글을 보관 운영하는 ArrayList 생성
                List<Board> boardList = new ArrayList<>();

                //객체(Board) 객체 추가
                boardList.add(new Board("제목1","ssg1","아 오늘 너무 힘드네..."));
                boardList.add(new Board("제목2","ssg2","진도가 너무"));
                boardList.add(new Board("제목3","ssg3","빠른거 아님?"));

                // 저장된 글 목록 수
                int size = boardList.size();
                System.out.println("총 글의 수 : " + size);

                // 특정 인덱스의 객체 가져오기
                Board board = boardList.get(1);
                System.out.printf("주제 : %s 작성자 : %s 내용 : %s\n",board.getSubject(),board.getWriter(),board.getContent());

                // 글 목록
                for(Board b : boardList){
                    System.out.printf("주제 : %s 작성자 : %s 내용 : %s\n",b.getSubject(),b.getWriter(),b.getContent());
                }

                // 글 삭제
                boardList.remove(1);
                for(Board b : boardList){
                    System.out.printf("주제 : %s 작성자 : %s 내용 : %s\n",b.getSubject(),b.getWriter(),b.getContent());
                }
                System.out.println("======================================================================");
                boardList.remove(1);
                for(int i = 0; i < boardList.size(); i++){
                    System.out.printf("%d\n",i);
                }
                for(Board b : boardList){
                    System.out.printf("주제 : %s 작성자 : %s 내용 : %s\n",b.getSubject(),b.getWriter(),b.getContent());
                }
            }
        }

        ```


    ### ArrayList

    ### LinkedList (연결리스트)

    - 떨어진 곳에 존재하는 데이터를 화살표(포인터)로 연결해서 관리하는 데이터 구조
        - 노드(Node) : 데이터의 저장 단위(데이터값 + 포인터) 구조
        - 포인터(pointer) : 각 노드 안에서 다음이나 이전의 노드와의 연결 정보를 가지고 있는 공간

        ```java
        package Day07.collection.linkedlistImpl;

        public class Node<T> {
            T data;
            Node<T> next = null;

            public Node(T data) {
                this.data = data;
            }
        }
        ```

        ```java
        package Day07.collection.linkedlistImpl;

        public class SingleLinkedList<T> {
            public Node<T> head = null;

            public class Node<T> {
                T data;
                Node<T> next = null;

                public Node(T data) {
                    this.data = data;
                }
            }

            public void addNode(T data) {
                if (this.head == null) {
                    this.head = new Node<T>(data);
                } else {
                    Node<T> node = this.head;
                    while (node.next != null) {
                        node = node.next;
                    }
                    node.next = new Node<>(data);
                }
            }
            public void printAll(){
                if(this.head != null){
                    Node<T> node = this.head;
                    System.out.println(node.data);
                    while(node.next != null){
                        node = node.next;
                        System.out.println(node.data);
                    }
                }
            }
        }
        ```

        ```java
        package Day07.collection.linkedlistImpl;

        public class Main {
            public static void main(String[] args) {
                SingleLinkedList<Integer> myLinkedList = new SingleLinkedList<Integer>();
                myLinkedList.addNode(1);
                System.out.println(myLinkedList.head.data);
                myLinkedList.addNode(2);
                System.out.println(myLinkedList.head.next.data);
                myLinkedList.addNode(3);
                System.out.println(myLinkedList.head.next.next.data);
                myLinkedList.addNode(4);
                System.out.println(myLinkedList.head.next.next.next.data);
                System.out.println("=======================================");
                myLinkedList.printAll();
            }
        }
        ```
